// # миксин для объявлений CSS переменных при @import "root.scss" # //
@mixin variablesRoot($vars-root) {
	@each $key, $value in $vars-root {
		--#{$key}: #{$value};
	}
}

// # ПОДКЛЮЧЕНИЕ ШРИФТОВ # //
// > Миксин includeFont принимает 3 аргумента:
// >  - $file - название файла без его расширения
// >  - $weight - жирность
// >  - $style - начертание
// > Внутри миксина includeFont также есть 3 обязательные переменные:
// >  - $include-font-types - ассоциативный массив подключаемых форматов шрифта
// >  - $include-font-path - строка пути до файлов шрифта
// >  - $include-font-family - строка названия шрифта для вызова его в проекте
@mixin includeFont($file, $weight: normal, $style: normal) {
	@each $type, $format in $include-font-types {
		@font-face {
			src: local($file), local($file), url($include-font-path + $file + "." + $type) format($format);

			font-family: $include-font-family;
			font-weight: $weight;
			font-style: $style;
			font-stretch: normal;
			font-display: block;
		}
	}
}

// # МЕДИАЗАПРОСЫ ЭКРАНОВ ОТОБРАЖЕНИЯ # //
// > Миксин media принимает два параметра $media и $orientation.
// > 	- $media - аргумент принимает ключи медиазапроса которые указны в $breakpoints.
// > 	- $orientation - аргумент принимает три значения min, max и within.
// > 	- Параметру $orientation изначально назначен min (по mobile first).
@mixin media($media,  $orientation: $media-direction) {
	$index: 1;

	@each $name-breakpoint, $screen-value in $breakpoints {
		@if $media == $name-breakpoint {
			@if $orientation == "min" { // от большего разрешения к меньшему (включительно)
				@media screen and (#{$orientation}-width: ($screen-value) + "px") {
					@content;
				}
			} @else if $orientation == "max" { // от меньшего разрешения к большему (включительно)
				@if length(map-values($breakpoints)) < $index + 1 {
					@error "Данный медиазапрос #{$media} не существует, так как вы выбрали desktop first";
				} @else {
					@media screen and (#{$orientation}-width: (nth(map-values($breakpoints), $index + 1) - 1) + "px") {
						@content;
					}
				}
			} @else if $orientation == "within" { // для конкретного разрешения
				@if (index(map-keys($breakpoints), $media) > 1) {
					@media screen and (min-width: (getPreviousSize($media) + 1) + "px") and (max-width: $screen-value + "px") {
						@content;
					}
				} @else {
					@media screen and (max-width: $screen-value + "px") {
						@content;
					}
				}
			}
		}

		$index: $index + 1; // stylelint-disable-line order/order
	}
}

// # ПОДКЛЮЧЕНИЕ УТИЛИТНЫХ КЛАССОВ # //
@mixin utilities($class-name, $property-utilities, $unit: "") {
	.#{$class-name} {
		$breakpoints-name-list: map-keys($breakpoints);

		@for $index from 1 through length($breakpoints) {
			@if nth($breakpoints-name-list, -$index) == "xxl" {
				@each $property in $property-values {

					@if $property == start or $property == end {
						&-#{$property} {
							#{$property-utilities}: flex-#{$property};
						}
					} @else if $property == between or $property == around {
						&-#{$property} {
							#{$property-utilities}: space-#{$property};
						}
					} @else {
						&-#{$property} {
							#{$property-utilities}: #{$property}#{$unit};
						}
					}
				}
			} @else if nth($breakpoints-name-list, -$index) != "xxl" {
				@each $property in $property-values {
					@if $property == start or $property == end {
						&-#{$property}\@#{classMedia(nth($breakpoints-name-list, -$index))} {
							@include media(nth($breakpoints-name-list, -$index)) {
								#{$property-utilities}: flex-#{$property};
							}
						}
					} @else if $property == between or $property == around {
						&-#{$property}\@#{classMedia(nth($breakpoints-name-list, -$index))} {
							@include media(nth($breakpoints-name-list, -$index)) {
								#{$property-utilities}: space-#{$property};
							}
						}
					} @else {
						&-#{$property}\@#{classMedia(nth($breakpoints-name-list, -$index))} {
							@include media(nth($breakpoints-name-list, -$index)) {
								#{$property-utilities}: #{$property}#{$unit};
							}
						}
					}
				}
			}
		}
	}
}

// # ПОДКЛЮЧЕНИЕ УТИЛИТНЫХ КЛАССОВ SPACINGS # //
@mixin spacings($class-name, $property-spacing, $auto: false) {
	.#{$class-name} {
		$breakpoints-name-list: map-keys($breakpoints);

		@for $index from 1 through length($breakpoints) {
			@if nth($breakpoints-name-list, -$index) == "xxl" {
				@each $property in $property-values-spacings {
					@if $property == "auto" and $auto {
						&-#{$property} {
							#{$property-spacing}: #{$property};
						}
					} @else if $property != "auto" {
						&-#{$property} {
							@if $class-name == g or $class-name == cg {
								--column-gap: #{$property}px;
							}
							#{$property-spacing}: #{$property}px;
						}
					}
				}
			} @else if nth($breakpoints-name-list, -$index) != "xxl" {
				@each $property in $property-values-spacings {
					@if $property == "auto" and $auto {
						&-#{$property}\@#{classMedia(nth($breakpoints-name-list, -$index))} {
							@include media(nth($breakpoints-name-list, -$index)) {
								#{$property-spacing}: #{$property};
							}
						}
					} @else if $property != "auto" {
						&-#{$property}\@#{classMedia(nth($breakpoints-name-list, -$index))} {
							@include media(nth($breakpoints-name-list, -$index)) {
								@if $class-name == g or $class-name == cg {
									--column-gap: #{$property}px;
								}
								#{$property-spacing}: #{$property}px;
							}
						}
					}
				}
			}
		}
	}
}

// # СКРЫТИЕ ПОЛОСЫ ПРОКРУТКИ SCROLLBAR # //
@mixin no-scrollbar {
	scrollbar-width: none;

	&::-webkit-scrollbar {
		display: none;

		width: 0;
		height: 0;
	}
}
