-
	//- Проверка данных из сторов
	function shortcutCheckStore (dataStore) {
		return {
			ELEM: function ELEM(storeElem, value = {}) {
				return dataStore && dataStore.elem && dataStore.elem[storeElem] ? dataStore.elem[storeElem] : value;
			},
			DATA: function DATA(storeData, value = ''){
				return dataStore && dataStore.data && dataStore.data[storeData] ? dataStore.data[storeData] : value;
			},
			OPT: function OPT(storeOpt) {
				return dataStore && dataStore.opt && dataStore.opt[storeOpt] ? !!dataStore.opt[storeOpt] : false;
			},
			ELEM_ARR: function ELEM_ARR(storeElemArr, value = []) {
				return dataStore && dataStore.elem && dataStore.elem[storeElemArr] && dataStore.elem[storeElemArr] ? dataStore.elem[storeElemArr] : value;
			},
			DATA_ARR: function DATA_ARR(storeDataArr, value = []) {
				return dataStore && dataStore.dataArr && dataStore.dataArr[storeDataArr] ? dataStore.dataArr[storeDataArr] : value;
			},
		}
	};

	//- Для подключение секций
	function addSections(section) {
		const sections = [];

		return {
			addSection(section) {
				sections.push(section);
			},
			getSections: sections
		};
	}

	//- BEM classNames
	function withNaming(preset) {
		function stringify(blockName, elemName, mod, mix) {
			const entityName = elemName ? blockName + preset.e + elemName : blockName;
			let className = entityName;

			// Добавление модификатора
			if (mod) {
				const modPrefix = ' ' + className + preset.m;
				for (const key in mod) {
					if (mod.hasOwnProperty(key)) {
						const modVal = mod[key];
						if (modVal === true) {
							className += modPrefix + key;
						} else if (modVal) {
							className += ' ' + 'NO-BOOLEAN';
						}
					}
				}
			}

			// Добавление дополнительных классов
			if (mix !== undefined) {
				for (let i = 0, len = mix.length; i < len; i++) {
					const value = mix[i];

					// Проверка только на строковое значение
					if (!value || typeof value.valueOf() !== 'string') {
						continue;
					}

					const mixes = value.valueOf().split(' ');
					for (let j = 0; j < mixes.length; j++) {
						const val = mixes[j];
						if (val !== entityName) {
							className += ' ' + val;
						}
					}
				}
			}
			return className;
		}

		return function cnGenerator(blockName, elemName) {
			return (elemOrMods, elemModsOrBlockMix, elemMix) => {
				if (typeof elemOrMods === 'string') {
					if (Array.isArray(elemModsOrBlockMix)) {
						return stringify(blockName, elemOrMods, undefined, elemModsOrBlockMix);
					}
					return stringify(blockName, elemOrMods, elemModsOrBlockMix, elemMix);
				}
				return stringify(blockName, elemName, elemOrMods, elemModsOrBlockMix);
			};
		};
	}

	let CN = withNaming({ e: '__', m: '_'});

- let DATE_NOW = -Date.now();

mixin DEBUG(variables, text)
	- let TEXT = text === undefined ? '' : text;
	script.
		console.log(!{JSON.stringify(variables).replace(/<\//g, "<\\/")}, !{JSON.stringify(TEXT).replace(/<\//g, "<\\/")})
